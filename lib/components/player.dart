// Th∆∞ vi·ªán Dart c∆° b·∫£n
import 'dart:async'; // Async/await cho h√†m b·∫•t ƒë·ªìng b·ªô
import 'dart:math'; // H√†m to√°n h·ªçc (Random, sin, cos...)
import 'dart:ui'; // C√°c thao t√°c UI c∆° b·∫£n

// Import c√°c component game kh√°c
import 'package:cosmic_havoc/components/asteroid.dart'; // Thi√™n th·∫°ch (ƒë·ªÉ x·ª≠ l√Ω va ch·∫°m)
import 'package:cosmic_havoc/components/bomb.dart'; // Bom (v≈© kh√≠ c·ªßa player)
import 'package:cosmic_havoc/components/explosion.dart'; // Hi·ªáu ·ª©ng n·ªï
import 'package:cosmic_havoc/components/laser.dart'; // Laser (v≈© kh√≠ ch√≠nh)
import 'package:cosmic_havoc/components/pickup.dart'; // V·∫≠t ph·∫©m thu th·∫≠p
import 'package:cosmic_havoc/components/shield.dart'; // Khi√™n b·∫£o v·ªá
import 'package:cosmic_havoc/my_game.dart'; // Game ch√≠nh (ƒë·ªÉ truy c·∫≠p game state)

// Flame components
import 'package:flame/collisions.dart'; // H·ªá th·ªëng va ch·∫°m
import 'package:flame/components.dart'; // C√°c component c∆° b·∫£n
import 'package:flame/effects.dart'; // Hi·ªáu ·ª©ng animation
import 'package:flutter/services.dart'; // X·ª≠ l√Ω input t·ª´ keyboard

// Class Player - t√†u ng∆∞·ªùi ch∆°i
class Player
    extends SpriteAnimationComponent // K·∫ø th·ª´a t·ª´ component c√≥ animation
    with
        HasGameReference<MyGame>, // Mixin ƒë·ªÉ truy c·∫≠p game instance
        KeyboardHandler, // Mixin x·ª≠ l√Ω ph√≠m b√†n ph√≠m
        CollisionCallbacks {
  // Mixin x·ª≠ l√Ω va ch·∫°m

  // Tr·∫°ng th√°i b·∫Øn s√∫ng
  bool _isShooting = false; // C√≥ ƒëang b·∫Øn kh√¥ng?
  final double _fireCooldown = 0.2; // Th·ªùi gian ch·ªù gi·ªØa c√°c ph√°t b·∫Øn (gi√¢y)
  double _elapsedFireTime = 0.0; // Th·ªùi gian ƒë√£ tr√¥i qua t·ª´ l·∫ßn b·∫Øn cu·ªëi

  // Di chuy·ªÉn b·∫±ng keyboard
  final Vector2 _keyboardMovement = Vector2.zero(); // Vector di chuy·ªÉn (x,y)

  // Tr·∫°ng th√°i game
  bool _isDestroyed = false; // T√†u ƒë√£ b·ªã ph√° h·ªßy ch∆∞a?
  final Random _random = Random(); // T·∫°o s·ªë ng·∫´u nhi√™n cho hi·ªáu ·ª©ng

  // Timer cho c√°c hi·ªáu ·ª©ng
  late Timer _explosionTimer; // Timer t·∫°o n·ªï khi t√†u b·ªã ph√° h·ªßy

  // üöÄ H·ªÜ TH·ªêNG LASER N√ÇNG C·∫§P
  int _laserLevel = 1; // Level laser hi·ªán t·∫°i (1-10)
  static const int maxLaserLevel = 10; // Level t·ªëi ƒëa
  static const double laserSpacing = 20.0; // Kho·∫£ng c√°ch gi·ªØa laser song song

  // H·ªá th·ªëng b·∫£o v·ªá
  Shield? activeShield; // Khi√™n hi·ªán t·∫°i (null = kh√¥ng c√≥ khi√™n)

  // M√†u s·∫Øc t√†u
  late String _color; // M√†u t√†u ƒë∆∞·ª£c ch·ªçn ('blue', 'red', etc.)

  Player() {
    _explosionTimer = Timer(
      0.1,
      onTick: _createRandomExplosion,
      repeat: true,
      autoStart: false,
    );
  }

  @override
  FutureOr<void> onLoad() async {
    _color = game.playerColors[game.playerColorIndex];

    animation = await _loadAnimation();

    size *= 0.3;

    add(RectangleHitbox.relative(
      Vector2(0.6, 0.9),
      parentSize: size,
      anchor: Anchor.center,
    ));

    return super.onLoad();
  }

  @override
  void update(double dt) {
    super.update(dt);

    if (_isDestroyed) {
      _explosionTimer.update(dt);
      return;
    }

    // Laser level gi·ªù l√† permanent, kh√¥ng c·∫ßn timer

    // K·∫øt h·ª£p input t·ª´ joystick v√† b√†n ph√≠m
    //t·ªëc ƒë·ªô
    final Vector2 movement = game.joystick.relativeDelta + _keyboardMovement;
    position += movement.normalized() * 250 * dt;

    _handleScreenBounds();

    // X·ª≠ l√Ω logic b·∫Øn s√∫ng
    _elapsedFireTime += dt;
    if (_isShooting && _elapsedFireTime >= _fireCooldown) {
      _fireLaser();
      _elapsedFireTime = 0.0;
    }
  }

  Future<SpriteAnimation> _loadAnimation() async {
    return SpriteAnimation.spriteList(
      [
        await game.loadSprite('player_${_color}_on0.png'),
        await game.loadSprite('player_${_color}_on1.png'),
      ],
      stepTime: 0.1,
      loop: true,
    );
  }

  void _handleScreenBounds() {
    final double screenWidth = game.size.x;
    final double screenHeight = game.size.y;

    // üîí KH√ìA T√ÄU TRONG KHUNG H√åNH - KH√îNG CHO ƒêI RA NGO√ÄI

    // Gi·ªõi h·∫°n v·ªã tr√≠ Y (tr√™n - d∆∞·ªõi)
    position.y = clampDouble(
      position.y,
      size.y / 2, // Kh√¥ng cho ƒëi qua m√©p tr√™n
      screenHeight - size.y / 2, // Kh√¥ng cho ƒëi qua m√©p d∆∞·ªõi
    );

    // Gi·ªõi h·∫°n v·ªã tr√≠ X (tr√°i - ph·∫£i) - KH√ìA THAY V√å WRAPAROUND
    position.x = clampDouble(
      position.x,
      size.x / 2, // Kh√¥ng cho ƒëi qua m√©p tr√°i
      screenWidth - size.x / 2, // Kh√¥ng cho ƒëi qua m√©p ph·∫£i
    );
  }

  void startShooting() {
    _isShooting = true;
  }

  void stopShooting() {
    _isShooting = false;
  }

  void _fireLaser() {
    // üéµ T·ªëi ∆∞u: Ch·ªâ ph√°t √¢m thanh khi b·∫Øt ƒë·∫ßu b·∫Øn ƒë·ªÉ tr√°nh spam
    if (_elapsedFireTime == 0.0) {
      game.audioManager.playSound('laser');
    }

    // üöÄ B·∫Øn laser theo level hi·ªán t·∫°i
    _fireLasersByLevel();
  }

  // üéØ B·∫Øn laser theo level - T·ªêI ∆ØU HI·ªÜU NƒÇNG
  void _fireLasersByLevel() {
    final Vector2 basePosition = position.clone() + Vector2(0, -size.y / 2);

    if (_laserLevel == 1) {
      // Level 1: 1 tia th·∫≥ng
      _createOptimizedLaser(basePosition, 0.0);
    } else if (_laserLevel == 2) {
      // Level 2: 2 tia song song
      _createOptimizedLaser(basePosition + Vector2(-laserSpacing / 2, 0), 0.0);
      _createOptimizedLaser(basePosition + Vector2(laserSpacing / 2, 0), 0.0);
    } else {
      // Level 3-10: T·ªèa ra v·ªõi g√≥c ƒë·ªÅu
      final int numLasers = _laserLevel.clamp(3, maxLaserLevel);
      final double totalSpread = 60.0 * degrees2Radians; // 60 ƒë·ªô t·ªïng
      final double angleStep = totalSpread / (numLasers - 1);

      for (int i = 0; i < numLasers; i++) {
        final double angle = -totalSpread / 2 + i * angleStep;
        _createOptimizedLaser(basePosition, angle);
      }
    }
  }

  // ‚ö° T·ªëi ∆∞u: T·∫°o laser v·ªõi √≠t object allocation
  void _createOptimizedLaser(Vector2 pos, double angle) {
    game.add(Laser(
      position: pos,
      angle: angle,
    ));
  }

  // üÜô N√¢ng c·∫•p laser level
  void _upgradeLaserLevel() {
    if (_laserLevel < maxLaserLevel) {
      _laserLevel++;
      print('üöÄ Laser upgraded to Level $_laserLevel!');

      // ‚úÖ C·∫¨P NH·∫¨T HI·ªÇN TH·ªä LASER LEVEL TR√äN UI
      game.updateLaserLevelDisplay(_laserLevel);

      // Hi·ªáu ·ª©ng visual cho upgrade (optional)
      _showUpgradeEffect();
    } else {
      print('‚≠ê Laser ƒë√£ ƒë·∫°t level t·ªëi ƒëa!');
      // Thay v√¨ n√¢ng c·∫•p, c√≥ th·ªÉ th√™m bonus kh√°c (damage, speed, etc.)
    }
  }

  // ‚ú® Hi·ªáu ·ª©ng upgrade laser
  void _showUpgradeEffect() {
    // S·ª≠ d·ª•ng hi·ªáu ·ª©ng scale thay v√¨ ƒë·ªïi m√†u ƒë·ªÉ tr√°nh l√†m t√†u chuy·ªÉn sang m√†u kh√°c
    add(ScaleEffect.by(
      Vector2.all(1.2), // TƒÉng k√≠ch th∆∞·ªõc 20%
      EffectController(
        duration: 0.15,
        reverseDuration: 0.15, // Quay v·ªÅ k√≠ch th∆∞·ªõc ban ƒë·∫ßu
      ),
    ));
  }

  // üìä Getter cho laser level (ƒë·ªÉ UI hi·ªÉn th·ªã)
  int get laserLevel => _laserLevel;

  void _handleDestruction() async {
    animation = SpriteAnimation.spriteList(
      [
        await game.loadSprite('player_${_color}_off.png'),
      ],
      stepTime: double.infinity,
    );

    add(ColorEffect(
      const Color.fromRGBO(255, 255, 255, 1.0),
      EffectController(duration: 0.0),
    ));

    add(OpacityEffect.fadeOut(
      EffectController(duration: 3.0),
      onComplete: () => _explosionTimer.stop(),
    ));

    add(MoveEffect.by(
      Vector2(0, 200),
      EffectController(duration: 3.0),
    ));

    add(RemoveEffect(
      delay: 4.0,
      onComplete: game.playerDied,
    ));

    _isDestroyed = true;

    _explosionTimer.start();
  }

  void _createRandomExplosion() {
    final Vector2 explosionPosition = Vector2(
      position.x - size.x / 2 + _random.nextDouble() * size.x,
      position.y - size.y / 2 + _random.nextDouble() * size.y,
    );

    final ExplosionType explosionType =
        _random.nextBool() ? ExplosionType.smoke : ExplosionType.fire;

    final Explosion explosion = Explosion(
      position: explosionPosition,
      explosionSize: size.x * 0.7,
      explosionType: explosionType,
    );

    game.add(explosion);
  }

  @override
  void onCollision(Set<Vector2> intersectionPoints, PositionComponent other) {
    super.onCollision(intersectionPoints, other);

    if (_isDestroyed) return;

    if (other is Asteroid) {
      if (activeShield == null) _handleDestruction();
    } else if (other is Pickup) {
      // Ph√°t √¢m thanh kh√°c nhau cho coin v√† power-ups
      if (other.pickupType == PickupType.coin) {
        game.audioManager.playSound('dropcoin'); // √Çm thanh ri√™ng cho coin
      } else {
        game.audioManager.playSound('collect'); // √Çm thanh cho power-ups
      }

      other.removeFromParent();

      // Ch·ªâ tƒÉng ƒëi·ªÉm khi thu coin, kh√¥ng tƒÉng cho c√°c pickup kh√°c
      if (other.pickupType == PickupType.coin) {
        game.incrementScore(10); // Coin cho 10 ƒëi·ªÉm
      }

      switch (other.pickupType) {
        case PickupType.laser:
          // üöÄ N√¢ng c·∫•p laser level (kh√¥ng gi·∫£m t·ªëc ƒë·ªô b·∫Øn)
          _upgradeLaserLevel();
          break;
        case PickupType.bomb:
          game.add(Bomb(position: position.clone()));
          break;
        case PickupType.shield:
          if (activeShield != null) {
            remove(activeShield!);
          }
          activeShield = Shield();
          add(activeShield!);
          break;
        case PickupType.coin:
          // üí∞ Thu th·∫≠p coin - ƒë√£ tƒÉng ƒëi·ªÉm v√† ph√°t √¢m thanh ·ªü tr√™n
          break;
      }
    }
  }

  @override
  bool onKeyEvent(KeyEvent event, Set<LogicalKeyboardKey> keysPressed) {
    // Reset vector di chuy·ªÉn
    _keyboardMovement.setZero();

    // ===== DI CHUY·ªÇN NGANG (Tr√°i/Ph·∫£i) =====
    // M≈©i t√™n tr√°i ho·∫∑c ph√≠m A
    if (keysPressed.contains(LogicalKeyboardKey.arrowLeft) ||
        keysPressed.contains(LogicalKeyboardKey.keyA)) {
      _keyboardMovement.x -= 1;
    }

    // M≈©i t√™n ph·∫£i ho·∫∑c ph√≠m D
    if (keysPressed.contains(LogicalKeyboardKey.arrowRight) ||
        keysPressed.contains(LogicalKeyboardKey.keyD)) {
      _keyboardMovement.x += 1;
    }

    // ===== DI CHUY·ªÇN D·ªåC (L√™n/Xu·ªëng) =====
    // M≈©i t√™n l√™n ho·∫∑c ph√≠m W
    if (keysPressed.contains(LogicalKeyboardKey.arrowUp) ||
        keysPressed.contains(LogicalKeyboardKey.keyW)) {
      _keyboardMovement.y -= 1;
    }

    // M≈©i t√™n xu·ªëng ho·∫∑c ph√≠m S
    if (keysPressed.contains(LogicalKeyboardKey.arrowDown) ||
        keysPressed.contains(LogicalKeyboardKey.keyS)) {
      _keyboardMovement.y += 1;
    }

    // ===== B·∫ÆN S√öNG =====
    // Ph√≠m Space ƒë·ªÉ b·∫Øn (v·ªõi cooldown t·ª± ƒë·ªông trong update())
    if (keysPressed.contains(LogicalKeyboardKey.space)) {
      _isShooting =
          true; // Set tr·∫°ng th√°i b·∫Øn, logic cooldown x·ª≠ l√Ω trong update()
    } else {
      _isShooting = false; // Ng·ª´ng b·∫Øn khi th·∫£ ph√≠m
    }

    return true; // ƒê√£ x·ª≠ l√Ω input
  }
}
