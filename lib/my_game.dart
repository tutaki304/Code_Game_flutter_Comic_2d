// Th∆∞ vi·ªán Dart c∆° b·∫£n
import 'dart:async'; // H·ªó tr·ª£ b·∫•t ƒë·ªìng b·ªô (async/await)
import 'dart:math'; // C√°c h√†m to√°n h·ªçc (Random, sin, cos...)

// Import c√°c component game t·ª± t·∫°o
import 'package:cosmic_havoc/components/asteroid.dart'; // Thi√™n th·∫°ch trong game
import 'package:cosmic_havoc/components/audio_manager.dart'; // Qu·∫£n l√Ω √¢m thanh v·ªõi flutter_soloud
import 'package:cosmic_havoc/components/pickup.dart'; // V·∫≠t ph·∫©m thu th·∫≠p
import 'package:cosmic_havoc/components/player.dart'; // T√†u ng∆∞·ªùi ch∆°i
import 'package:cosmic_havoc/components/shoot_button.dart'; // N√∫t b·∫Øn
import 'package:cosmic_havoc/components/star.dart'; // Sao tr√™n background

// Flame game engine components
import 'package:flame/components.dart'; // C√°c component c∆° b·∫£n c·ªßa Flame
import 'package:flame/effects.dart'; // Hi·ªáu ·ª©ng (scale, rotate, move...)
import 'package:flame/events.dart'; // X·ª≠ l√Ω s·ª± ki·ªán (tap, drag...)
import 'package:flame/flame.dart'; // Core Flame functionality
import 'package:flame/game.dart'; // Base game class
import 'package:flutter/material.dart'; // Flutter UI components

// Class ch√≠nh c·ªßa game, k·∫ø th·ª´a t·ª´ FlameGame
class MyGame extends FlameGame
    with
        HasKeyboardHandlerComponents, // Mixin ƒë·ªÉ x·ª≠ l√Ω ph√≠m b√†n ph√≠m
        HasCollisionDetection {
  // Mixin ƒë·ªÉ ph√°t hi·ªán va ch·∫°m gi·ªØa objects

  // C√°c component ch√≠nh c·ªßa game
  late Player player; // T√†u ng∆∞·ªùi ch∆°i (late = kh·ªüi t·∫°o sau)
  late JoystickComponent joystick; // Joystick ƒëi·ªÅu khi·ªÉn ·∫£o
  late SpawnComponent _asteroidSpawner; // B·ªô sinh thi√™n th·∫°ch t·ª± ƒë·ªông
  late SpawnComponent _pickupSpawner; // B·ªô sinh v·∫≠t ph·∫©m t·ª± ƒë·ªông
  final Random _random = Random(); // ƒê·ªëi t∆∞·ª£ng t·∫°o s·ªë ng·∫´u nhi√™n
  late ShootButton _shootButton; // N√∫t b·∫Øn

  // H·ªá th·ªëng ƒëi·ªÉm s·ªë
  int _score = 0; // ƒêi·ªÉm hi·ªán t·∫°i
  late TextComponent _scoreDisplay; // Component hi·ªÉn th·ªã ƒëi·ªÉm
  late TextComponent _laserLevelDisplay; // Component hi·ªÉn th·ªã laser level

  // H·ªá th·ªëng ch·ªçn m√†u t√†u
  final List<String> playerColors = [
    'blue',
    'red',
    'green',
    'purple'
  ]; // C√°c m√†u c√≥ s·∫µn
  int playerColorIndex = 0; // Ch·ªâ s·ªë m√†u hi·ªán t·∫°i ƒë∆∞·ª£c ch·ªçn

  // Qu·∫£n l√Ω √¢m thanh
  late final AudioManager
      audioManager; // Component x·ª≠ l√Ω music v√† sound effects

  // H√†m onLoad ƒë∆∞·ª£c g·ªçi khi game kh·ªüi t·∫°o l·∫ßn ƒë·∫ßu
  @override
  FutureOr<void> onLoad() async {
    // Thi·∫øt l·∫≠p m√†n h√¨nh full screen (·∫©n status bar)
    await Flame.device.fullScreen();
    // Kh√≥a m√†n h√¨nh ·ªü ch·∫ø ƒë·ªô d·ªçc (portrait)
    await Flame.device.setPortrait();

    // Kh·ªüi t·∫°o v√† th√™m audio manager v√†o game
    audioManager = AudioManager(); // T·∫°o ƒë·ªëi t∆∞·ª£ng qu·∫£n l√Ω √¢m thanh
    await add(audioManager); // Th√™m v√†o game world
    // audioManager.playMusic(); // B·∫Øt ƒë·∫ßu ph√°t nh·∫°c n·ªÅn - t·∫°m disable ƒë·ªÉ tr√°nh crash

    // T·∫°o c√°c ng√¥i sao l√†m background
    _createStars();

    return super.onLoad(); // G·ªçi onLoad c·ªßa class cha
  }

  // H√†m b·∫Øt ƒë·∫ßu game th·ª±c s·ª± (ƒë∆∞·ª£c g·ªçi t·ª´ Title Overlay)
  void startGame() async {
    await _createJoystick(); // T·∫°o joystick ƒëi·ªÅu khi·ªÉn
    await _createPlayer(); // T·∫°o t√†u ng∆∞·ªùi ch∆°i
    _createShootButton(); // T·∫°o n√∫t b·∫Øn
    _createAsteroidSpawner(); // T·∫°o b·ªô sinh thi√™n th·∫°ch
    _createPickupSpawner(); // T·∫°o b·ªô sinh v·∫≠t ph·∫©m
    _createScoreDisplay(); // T·∫°o hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
    _createLaserLevelDisplay(); // T·∫°o hi·ªÉn th·ªã laser level
    _showDeviceInfo(); // Hi·ªÉn th·ªã th√¥ng tin thi·∫øt b·ªã (debug)
  }

  // H√†m t·∫°o t√†u ng∆∞·ªùi ch∆°i
  Future<void> _createPlayer() async {
    player = Player() // T·∫°o ƒë·ªëi t∆∞·ª£ng Player
      ..anchor = Anchor.center // ƒê·∫∑t ƒëi·ªÉm neo ·ªü gi·ªØa sprite
      ..position =
          Vector2(size.x / 2, size.y * 0.8); // V·ªã tr√≠: gi·ªØa m√†n h√¨nh, g·∫ßn ƒë√°y
    add(player); // Th√™m player v√†o game world
  }

  Future<void> _createJoystick() async {
    // üì± Adaptive UI: T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh theo thi·∫øt b·ªã
    final isPhone =
        size.y > size.x; // Portrait = Phone, Landscape = Desktop/Tablet

    // Size v√† margin t√πy theo thi·∫øt b·ªã
    final joystickSizePercent =
        isPhone ? 0.28 : 0.12; // üéÆ TƒÉng t·ª´ 0.24 -> 0.28 cho m√†n h√¨nh nh·ªè
    final marginPercent = isPhone ? 0.08 : 0.04; // Phone c·∫ßn margin l·ªõn h∆°n

    final joystickSize = Vector2.all(size.x * joystickSizePercent);
    final knobSize = joystickSize * 0.6; // Knob chi·∫øm 60% background
    final margin = size.x * marginPercent;

    joystick = JoystickComponent(
      knob: SpriteComponent(
        sprite: await loadSprite('joystick_knob.png'),
        size: knobSize,
      ),
      background: SpriteComponent(
        sprite: await loadSprite('joystick_background.png'),
        size: joystickSize,
      ),
      anchor: Anchor.bottomLeft,
      position: Vector2(margin, size.y - margin),
      priority: 10,
    );
    add(joystick);
  }

  void _createShootButton() {
    // üì± Adaptive shoot button
    final isPhone = size.y > size.x;
    final marginPercent = isPhone ? 0.08 : 0.04; // Phone c·∫ßn margin l·ªõn h∆°n
    final margin = size.x * marginPercent;

    _shootButton = ShootButton()
      ..anchor = Anchor.bottomRight
      ..position = Vector2(size.x - margin, size.y - margin)
      ..priority = 10;

    // üéÆ Phone c·∫ßn button l·ªõn h∆°n 30% ƒë·ªÉ d·ªÖ ch·∫°m (tƒÉng t·ª´ 1.2 -> 1.3)
    if (isPhone) {
      _shootButton.scale = Vector2.all(1.3);
    }

    add(_shootButton);
  }

  void _createAsteroidSpawner() {
    _asteroidSpawner = SpawnComponent.periodRange(
      factory: (index) => Asteroid(position: _generateSpawnPosition()),
      minPeriod:
          1.5, // üéÆ M√†n h√¨nh nh·ªè: TƒÉng t·ª´ 1.2 -> 1.5 ƒë·ªÉ gi·∫£m density thi√™n th·∫°ch
      maxPeriod: 2.2, // üéÆ M√†n h√¨nh nh·ªè: TƒÉng t·ª´ 1.8 -> 2.2 ƒë·ªÉ d·ªÖ ch∆°i h∆°n
      selfPositioning: true,
    );
    add(_asteroidSpawner);
  }

  void _createPickupSpawner() {
    _pickupSpawner = SpawnComponent.periodRange(
      factory: (index) => Pickup(
        position: _generateSpawnPosition(),
        pickupType:
            PickupType.values[_random.nextInt(PickupType.values.length)],
      ),
      minPeriod:
          2.5, // üéÆ M√†n h√¨nh nh·ªè: Gi·∫£m t·ª´ 3.0 -> 2.5 ƒë·ªÉ pickup xu·∫•t hi·ªán nhanh h∆°n
      maxPeriod: 5.0, // üéÆ M√†n h√¨nh nh·ªè: Gi·∫£m t·ª´ 6.0 -> 5.0 ƒë·ªÉ d·ªÖ l·∫•y power-up
      selfPositioning: true,
    );
    add(_pickupSpawner);
  }

  Vector2 _generateSpawnPosition() {
    return Vector2(
      10 + _random.nextDouble() * (size.x - 10 * 2),
      -100,
    );
  }

  void _createScoreDisplay() {
    _score = 0;

    // üì± Adaptive score display
    final isPhone = size.y > size.x;

    // ƒêi·ªÅu ch·ªânh margin v√† font cho t·ª´ng thi·∫øt b·ªã
    final topMarginPercent = isPhone ? 0.08 : 0.04; // Phone tr√°nh notch/camera
    final fontSizePercent = isPhone ? 0.10 : 0.06; // Phone c·∫ßn font l·ªõn h∆°n

    final topMargin = size.y * topMarginPercent;
    final fontSize = size.x * fontSizePercent;

    _scoreDisplay = TextComponent(
      text: '0',
      anchor: Anchor.topCenter,
      position: Vector2(size.x / 2, topMargin),
      priority: 10,
      textRenderer: TextPaint(
        style: TextStyle(
          color: Colors.white,
          fontSize: fontSize,
          fontWeight: FontWeight.bold,
          shadows: [
            Shadow(
              color: Colors.black,
              offset: Offset(fontSize * 0.05,
                  fontSize * 0.05), // B√≥ng t·ª∑ l·ªá v·ªõi k√≠ch th∆∞·ªõc font
              blurRadius: fontSize * 0.05,
            ),
          ],
        ),
      ),
    );

    add(_scoreDisplay);
  }

  void _createLaserLevelDisplay() {
    // üì± Adaptive laser level display
    final isPhone = size.y > size.x;

    // ƒêi·ªÅu ch·ªânh size v√† position cho t·ª´ng thi·∫øt b·ªã
    final topMarginPercent = isPhone ? 0.08 : 0.04; // ƒê·ªìng b·ªô v·ªõi score
    final fontSizePercent = isPhone ? 0.06 : 0.04; // Phone c·∫ßn font l·ªõn h∆°n
    final sideMarginPercent = isPhone ? 0.08 : 0.04; // Phone c·∫ßn margin l·ªõn h∆°n

    final topMargin = size.y * topMarginPercent;
    final fontSize = size.x * fontSizePercent;
    final sideMargin = size.x * sideMarginPercent;

    // üéØ Position th√¥ng minh: Phone ƒë·ªÉ b√™n tr√°i, Desktop ƒë·ªÉ b√™n ph·∫£i
    final anchor = isPhone ? Anchor.topLeft : Anchor.topRight;
    final positionX = isPhone ? sideMargin : (size.x - sideMargin);

    _laserLevelDisplay = TextComponent(
      text: 'LASER LV.1',
      anchor: anchor,
      position: Vector2(positionX, topMargin),
      priority: 10,
      textRenderer: TextPaint(
        style: TextStyle(
          color: Colors.cyan,
          fontSize: fontSize,
          fontWeight: FontWeight.bold,
          shadows: [
            Shadow(
              color: Colors.black,
              offset: Offset(fontSize * 0.05, fontSize * 0.05),
              blurRadius: fontSize * 0.05,
            ),
          ],
        ),
      ),
    );

    add(_laserLevelDisplay);
  }

  void _showDeviceInfo() {
    // üîç Debug: Hi·ªÉn th·ªã th√¥ng tin thi·∫øt b·ªã v√† UI layout
    final isPhone = size.y > size.x;
    String deviceType;
    String layoutInfo;

    if (isPhone) {
      deviceType = 'üì± PHONE UI';
      layoutInfo = 'Portrait Mode - Laser Level: Top Left';
    } else {
      if (size.x < 1200) {
        deviceType = 'üìö TABLET UI';
      } else {
        deviceType = 'üñ•Ô∏è DESKTOP UI';
      }
      layoutInfo = 'Landscape Mode - Laser Level: Top Right';
    }

    final infoText = TextComponent(
      text:
          '$deviceType\nSize: ${size.x.toInt()}x${size.y.toInt()}\n$layoutInfo',
      anchor: Anchor.bottomCenter,
      position: Vector2(size.x / 2, size.y - 15),
      priority: 15,
      textRenderer: TextPaint(
        style: TextStyle(
          color: Colors.yellow.withOpacity(0.8),
          fontSize: isPhone ? 14 : 12,
          fontWeight: FontWeight.normal,
        ),
      ),
    );

    add(infoText);

    // T·ª± ƒë·ªông ·∫©n sau 4 gi√¢y
    Timer deviceInfoTimer = Timer(4.0, onTick: () {
      remove(infoText);
    });
    deviceInfoTimer.start();
  }

  void updateLaserLevelDisplay(int level) {
    _laserLevelDisplay.text = 'LASER LV.$level';

    // Hi·ªáu ·ª©ng nh·∫•p nh√°y khi n√¢ng c·∫•p
    final glowEffect = ScaleEffect.to(
      Vector2.all(1.3),
      EffectController(
        duration: 0.15,
        alternate: true,
        curve: Curves.easeInOut,
      ),
    );
    _laserLevelDisplay.add(glowEffect);
  }

  void incrementScore(int amount) {
    _score += amount;
    _scoreDisplay.text = _score.toString();

    final ScaleEffect popEffect = ScaleEffect.to(
      Vector2.all(1.2),
      EffectController(
        duration: 0.05,
        alternate: true,
        curve: Curves.easeInOut,
      ),
    );

    _scoreDisplay.add(popEffect);
  }

  void _createStars() {
    for (int i = 0; i < 50; i++) {
      add(Star()..priority = -10);
    }
  }

  void playerDied() {
    overlays.add('GameOver');
    pauseEngine();
  }

  void restartGame() {
    // X√≥a t·∫•t c·∫£ asteroids v√† pickups hi·ªán t·∫°i trong game
    children.whereType<PositionComponent>().forEach((component) {
      if (component is Asteroid || component is Pickup) {
        remove(component);
      }
    });

    // Reset spawners cho asteroids v√† pickups
    _asteroidSpawner.timer.start();
    _pickupSpawner.timer.start();

    // Reset ƒëi·ªÉm v·ªÅ 0
    _score = 0;
    _scoreDisplay.text = '0';

    // Reset hi·ªÉn th·ªã level laser v·ªÅ level 1
    _laserLevelDisplay.text = 'LASER LV.1';

    // T·∫°o sprite player m·ªõi
    _createPlayer();

    resumeEngine();
  }

  void quitGame() {
    // X√≥a m·ªçi th·ª© trong game tr·ª´ stars
    children.whereType<PositionComponent>().forEach((component) {
      if (component is! Star) {
        remove(component);
      }
    });

    remove(_asteroidSpawner);
    remove(_pickupSpawner);

    // Hi·ªÉn th·ªã title overlay
    overlays.add('Title');

    resumeEngine();
  }
}
