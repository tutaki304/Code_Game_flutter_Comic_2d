import 'package:cosmic_havoc/my_game.dart';
import 'package:flutter/material.dart';

/**
 * GameOverOverlay - M√†n h√¨nh hi·ªÉn th·ªã khi game over
 * 
 * üéÆ CH·ª®C NƒÇNG CH√çNH:
 * - Hi·ªÉn th·ªã "GAME OVER" v·ªõi fade-in animation
 * - 2 buttons: "PLAY AGAIN" (restart) v√† "QUIT GAME" (v·ªÅ menu)
 * - Semi-transparent background (ƒëen m·ªù 150 alpha)
 * - Smooth fade out animation khi tho√°t
 * 
 * üîÑ LIFECYCLE:
 * 1. ƒê∆∞·ª£c show b·ªüi MyGame.playerDied() 
 * 2. Fade in t·ª´ opacity 0 ‚Üí 1 (500ms)
 * 3. User ch·ªçn action ‚Üí fade out v·ªÅ 0 ‚Üí auto remove
 * 
 * üì± RESPONSIVE: Font size c·ªë ƒë·ªãnh ph√π h·ª£p m·ªçi thi·∫øt b·ªã
 */
class GameOverOverlay extends StatefulWidget {
  final MyGame game; // Reference ƒë·∫øn game instance ƒë·ªÉ g·ªçi methods

  const GameOverOverlay({super.key, required this.game});

  @override
  State<GameOverOverlay> createState() => _GameOverOverlayState();
}

class _GameOverOverlayState extends State<GameOverOverlay> {
  // ===============================================
  // üé® STATE VARIABLES
  // ===============================================

  double _opacity =
      0.0; // Opacity cho fade in/out animation (0.0 = invisible, 1.0 = visible)

  // ===============================================
  // üîÑ LIFECYCLE METHODS
  // ===============================================

  /**
   * initState() - Kh·ªüi t·∫°o overlay v·ªõi fade-in effect
   * 
   * Logic:
   * - B·∫Øt ƒë·∫ßu v·ªõi opacity = 0 (invisible)
   * - D√πng Future.delayed ƒë·ªÉ trigger setState trong next frame
   * - Set opacity = 1.0 ƒë·ªÉ AnimatedOpacity t·ª± fade in
   * 
   * Duration 0ms = execute ngay sau khi widget built
   */
  @override
  void initState() {
    super.initState();

    // ===== TRIGGER FADE-IN ANIMATION =====
    Future.delayed(
      const Duration(milliseconds: 0), // Execute trong next frame
      () {
        if (mounted) {
          // Safety check: widget c√≤n t·ªìn t·∫°i
          setState(() {
            _opacity = 1.0; // Trigger fade in animation
          });
        }
      },
    );
  }

  /**
   * build() - X√¢y d·ª±ng UI c·ªßa Game Over overlay
   * 
   * üèóÔ∏è STRUCTURE:
   * AnimatedOpacity (fade in/out)
   *   ‚îî‚îÄ‚îÄ Container (semi-transparent background)  
   *       ‚îî‚îÄ‚îÄ Column (center alignment)
   *           ‚îú‚îÄ‚îÄ "GAME OVER" text
   *           ‚îú‚îÄ‚îÄ "PLAY AGAIN" button
   *           ‚îî‚îÄ‚îÄ "QUIT GAME" button
   * 
   * üé≠ ANIMATIONS:
   * - Fade in: opacity 0‚Üí1 khi show (500ms)
   * - Fade out: opacity 1‚Üí0 khi button pressed ‚Üí auto remove overlay
   */
  @override
  Widget build(BuildContext context) {
    return AnimatedOpacity(
      // ===== ANIMATION CALLBACK =====
      onEnd: () {
        if (_opacity == 0.0) {
          // Khi fade out ho√†n t·∫•t
          widget.game.overlays.remove('GameOver'); // T·ª± ƒë·ªông x√≥a overlay
        }
      },
      opacity: _opacity, // Gi√° tr·ªã opacity hi·ªán t·∫°i
      duration: const Duration(milliseconds: 500), // Th·ªùi l∆∞·ª£ng animation

      // ===== OVERLAY CONTAINER =====
      child: Container(
        color: Colors.black.withAlpha(150), // N·ªÅn ƒëen b√°n trong su·ªët
        alignment: Alignment.center, // CƒÉn gi·ªØa t·∫•t c·∫£ n·ªôi dung

        // ===== MAIN CONTENT COLUMN =====
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center, // CƒÉn gi·ªØa theo d·ªçc
          children: [
            // ===== GAME OVER TITLE =====
            const Text(
              'GAME OVER',
              style: TextStyle(
                color: Colors.white, // Ch·ªØ tr·∫Øng ƒë·ªÉ t∆∞∆°ng ph·∫£n t·ªët
                fontSize: 48, // Font size l·ªõn ƒë·ªÉ b·∫Øt m·∫Øt
                fontWeight: FontWeight.bold, // Bold ƒë·ªÉ hi·ªáu ·ª©ng k·ªãch t√≠nh
              ),
            ),
            const SizedBox(height: 20), // Kho·∫£ng c√°ch gi·ªØa title v√† score

            // ===== FINAL SCORE DISPLAY =====
            Text(
              'SCORE: ${widget.game.score}',
              style: TextStyle(
                color: Colors.amber, // M√†u v√†ng n·ªïi b·∫≠t cho ƒëi·ªÉm
                fontSize: 36, // L·ªõn nh∆∞ng nh·ªè h∆°n GAME OVER
                fontWeight: FontWeight.bold,
                shadows: [
                  Shadow(
                    color: Colors.black.withOpacity(0.8),
                    offset: const Offset(2, 2),
                    blurRadius: 4,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 30), // Kho·∫£ng c√°ch gi·ªØa score v√† buttons

            // ===== PLAY AGAIN BUTTON =====
            TextButton(
              onPressed: () {
                // ===== BUTTON CLICK SEQUENCE =====
                widget.game.audioManager
                    .playSound('click'); // Play click sound effect
                widget.game.restartGame(); // Reset game v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
                setState(() {
                  _opacity = 0.0; // Trigger fade out animation
                });
                // Note: Overlay s·∫Ω t·ª± ƒë·ªông remove trong onEnd callback
              },

              // ===== BUTTON STYLING =====
              style: TextButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                    vertical: 10, horizontal: 25), // Padding c·ªßa button
                backgroundColor: Colors.blue, // N·ªÅn m√†u xanh
                shape: RoundedRectangleBorder(
                  borderRadius:
                      BorderRadius.circular(50), // Rounded corners (pill shape)
                ),
              ),

              // ===== BUTTON TEXT =====
              child: const Text(
                'PLAY AGAIN',
                style: TextStyle(
                  color: Colors.white, // White text tr√™n blue background
                  fontSize: 28, // Large readable font
                ),
              ),
            ),
            const SizedBox(height: 15), // Kho·∫£ng c√°ch gi·ªØa 2 buttons

            // ===== QUIT GAME BUTTON =====
            TextButton(
              onPressed: () {
                // ===== BUTTON CLICK SEQUENCE =====
                widget.game.audioManager
                    .playSound('click'); // Play click sound effect
                widget.game.quitGame(); // V·ªÅ main menu (keep background stars)
                setState(() {
                  _opacity = 0.0; // Trigger fade out animation
                });
                // Note: Overlay s·∫Ω t·ª± ƒë·ªông remove trong onEnd callback
              },

              // ===== BUTTON STYLING (GI·ªêNG NH∆Ø PLAY AGAIN) =====
              style: TextButton.styleFrom(
                padding: const EdgeInsets.symmetric(
                    vertical: 10, horizontal: 25), // Padding c·ªßa button
                backgroundColor:
                    Colors.blue, // N·ªÅn m√†u xanh (styling nh·∫•t qu√°n)
                shape: RoundedRectangleBorder(
                  borderRadius:
                      BorderRadius.circular(50), // Rounded corners (pill shape)
                ),
              ),

              // ===== BUTTON TEXT =====
              child: const Text(
                'QUIT GAME',
                style: TextStyle(
                  color: Colors.white, // White text tr√™n blue background
                  fontSize: 28, // Large readable font
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// ===============================================
// üìù IMPLEMENTATION NOTES
// ===============================================
//
// üéØ USER FLOW:
// 1. Player dies ‚Üí MyGame.playerDied() ‚Üí overlays.add('GameOver')
// 2. GameOverOverlay shows v·ªõi fade-in animation (500ms)
// 3. User nh·∫•n button ‚Üí play sound + action + fade out
// 4. Khi fade out xong ‚Üí overlay t·ª± ƒë·ªông remove
//
// üé® DESIGN PRINCIPLES:
// - Semi-transparent background: kh√¥ng che khu·∫•t ho√†n to√†n game
// - Large fonts: d·ªÖ ƒë·ªçc tr√™n mobile devices
// - Blue buttons: eye-catching nh∆∞ng kh√¥ng aggressive
// - Pill-shaped buttons: modern, friendly UI
//
// üîä AUDIO INTEGRATION:
// - Click sounds cho immediate feedback
// - S·ª≠ d·ª•ng AudioManager ƒë·ªÉ consistent v·ªõi game sounds
//
// üì± RESPONSIVE CONSIDERATIONS:
// - Fixed font sizes: 48px title, 28px buttons
// - Works well tr√™n phone/tablet/desktop
// - Center alignment: safe cho m·ªçi screen ratio
